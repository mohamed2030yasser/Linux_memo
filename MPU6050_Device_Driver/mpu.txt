#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <unistd.h>
#include <math.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <linux/i2c-dev.h>


#define I2C_BUS "/dev/i2c-1"
#define MPU_ADDR 0x68

int16_t read_word(int fd, uint8_t reg_addr) {
    uint8_t buffer[2];
    if (write(fd, &reg_addr, 1) != 1) {
        perror("Failed to write to I2C bus");
        exit(EXIT_FAILURE);
    }
    if (read(fd, buffer, 2) != 2) {
        perror("Failed to read from I2C bus");
        exit(EXIT_FAILURE);
    }
    return (buffer[0] << 8) | buffer[1];
}

int main() {
    // Open I2C bus
    int fd = open(I2C_BUS, O_RDWR);
    if (fd < 0) {
        perror("Failed to open I2C bus");
        exit(EXIT_FAILURE);
    }

    // Select MPU-6050 device
    if (ioctl(fd, I2C_SLAVE, MPU_ADDR) < 0) {
        perror("Failed to select MPU-6050 device");
        exit(EXIT_FAILURE);
    }

    // Initialize MPU-6050
    if (write(fd, "\x6B\x00", 2) != 2) {
        perror("Failed to initialize MPU-6050");
        exit(EXIT_FAILURE);
    }

    #define RAD_TO_DEG 57.295779513082320876798154814105
    #define PI 3.1415926535897932384626433832795

    long map(long x, long in_min, long in_max, long out_min, long out_max)
    {
      return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    }
    
    int acclX, acclY, acclZ;
    int gyroX, gyroY, gyroZ;
    double acclX_scaled, acclY_scaled, acclZ_scaled;
    double gyroX_scaled, gyroY_scaled, gyroZ_scaled;
    while (1) {
        acclX = read_word(fd,0x3B);
        acclY = read_word(fd,0x3D);
        acclZ = read_word(fd,0x3F);

        int xAng = map(acclX,265,402,-90,90);
          //return (AcX - 265) * (90 - 402) / (402 - 265) + -90);
        int yAng = map(acclY,265,402,-90,90);
        int zAng = map(acclZ,265,402,-90,90);

        double x= RAD_TO_DEG * (atan2(-yAng, -zAng)+PI);
        double y= RAD_TO_DEG * (atan2(-xAng, -zAng)+PI);
        double z= RAD_TO_DEG * (atan2(-yAng, -xAng)+PI);



         printf("rotate X = %f\trotate Y = %f\trotate Z = %f\t\n",x,y,z);

        usleep(10*1000); //>>Wait for x * (ms)
    }

    // Close I2C bus
    close(fd);
    return 0;
}
